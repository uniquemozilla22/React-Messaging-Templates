{"version":3,"sources":["head/head.js","body/ChatList/Chats/Chats.js","body/ChatList/ChatList.js","body/Messages/Message/Message.js","body/Messages/Messages.js","body/body.js","App.js","serviceWorker.js","index.js"],"names":["head","props","clas","darktoggle","push","className","join","type","name","placeholder","status","Chats","Avatar","ChatList","data-mcs-theme","Component","Message","day","messageclass","by","class","children","printing","chat","src","Messages","body","App","state","darkModeHandler","darkMode","setState","this","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4TA6BeA,G,YA1BF,SAACC,GACV,IAAIC,EAAK,CAAC,gBAMV,OALGD,EAAME,YAEPD,EAAKE,KAAK,QAIR,yBAAKC,UAAWH,EAAKI,KAAK,MACtB,yBAAKD,UAAU,oBACX,yBAAKA,UAAU,gBACX,2BAAOE,KAAK,OAAOC,KAAK,SAASC,YAAY,cAC7C,oCAAS,uBAAGJ,UAAU,iBAAtB,OAGR,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,iBACX,4BAAKJ,EAAMO,MACX,+BAAQP,EAAMS,a,gBCKnBC,EAvBD,SAACV,GAIX,OACI,6BACI,wBAAII,UAAWJ,EAAMS,QACT,yBAAKL,UAAU,YACX,yBAAKA,UAAU,OACX,uBAAGA,UAAU,iBACb,kBAACO,EAAA,EAAD,OAEJ,yBAAKP,UAAU,QACX,2BAAOA,UAAU,QAAjB,YACA,4BAAKJ,EAAMO,MACX,qECQjBK,E,uKApBP,OACI,yBAAKR,UAAU,gCAAgCS,iBAAe,gBACtD,4BACA,kBAAC,EAAD,CAAON,KAAK,mBAAmBE,OAAO,WACtC,kBAAC,EAAD,CAAOF,KAAK,QACZ,kBAAC,EAAD,CAAOA,KAAK,WACZ,kBAAC,EAAD,CAAOA,KAAK,YACZ,kBAAC,EAAD,CAAOA,KAAK,QACZ,kBAAC,EAAD,CAAOA,KAAK,WACZ,kBAAC,EAAD,CAAOA,KAAK,YACZ,kBAAC,EAAD,CAAOA,KAAK,QACZ,kBAAC,EAAD,CAAOA,KAAK,WACZ,kBAAC,EAAD,CAAOA,KAAK,kB,GAfTO,aCwCRC,EAxCC,SAACf,GACb,IACIgB,EADAC,EAAa,GAEH,OAAXjB,EAAMkB,GAELD,EAAa,YAEG,QAAXjB,EAAMkB,GAEZF,EAAI,wBAAIG,MAAM,WAAU,+BAAQnB,EAAMoB,WAGrCH,EAAa,YAEjB,IAUAI,EAVIC,EAAM,wBAAIlB,UAAWa,GACzB,yBAAKb,UAAU,gBACX,yBAAKmB,IAAI,MACT,yBAAKnB,UAAU,YAAf,iDAGA,6CAaJ,OALJiB,EAFe,QAAXrB,EAAMkB,GAEDF,EAGIM,EAGL,6BACMD,ICECG,EArCE,SAACxB,GACd,IAAIC,EAAK,CAAC,iBAQV,OANGD,EAAME,aAELD,EAAKE,KAAK,QAHJ,CAAC,wBAIDA,KAAK,SAIX,yBAAKC,UAAWH,EAAKI,KAAK,MAClB,yBAAKD,UAAU,2BAA2BS,iBAAe,gBACrD,4BACA,kBAAC,EAAD,CAASK,GAAG,OACZ,kBAAC,EAAD,CAASA,GAAG,OAAZ,aACA,kBAAC,EAAD,CAASA,GAAG,OACZ,kBAAC,EAAD,CAASA,GAAG,KACZ,kBAAC,EAAD,CAASA,GAAG,OACZ,kBAAC,EAAD,CAASA,GAAG,OAAZ,YACA,kBAAC,EAAD,CAASA,GAAG,OACZ,kBAAC,EAAD,CAASA,GAAG,SAGhB,yBAAKd,UAAU,wBACX,8BACI,yBAAKA,UAAU,cACX,4BAAQA,UAAU,OAAM,uBAAGA,UAAU,iBACrC,2BAAOE,KAAK,OAAOC,KAAK,YAE5B,2BAAOD,KAAK,OAAOC,KAAK,GAAGC,YAAY,iBACvC,4BAAQJ,UAAU,YAAW,uBAAGA,UAAU,oBCnBnDqB,EATF,SAACzB,GACV,OACI,yBAAKI,UAAU,gBACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAUF,WAAYF,EAAME,eC8BzBwB,E,4MAjCbC,MAAM,CACJzB,YAAW,G,EAGb0B,gBAAgB,WAEhB,IAAIC,EAAU,EAAKF,MAAMzB,WACzB,EAAK4B,SAAS,CACZ5B,YAAY2B,K,uDAQZ,IAAI5B,EAAK,CAAC,gBAOV,OALG8B,KAAKJ,MAAMzB,YAEZD,EAAKE,KAAK,QAIV,yBAAKC,UAAWH,EAAKI,KAAK,MACxB,4BAAQ2B,QAASD,KAAKH,iBAAtB,QACA,kBAAC,EAAD,CAAcrB,KAAK,mBAAmBE,OAAO,SAASP,WAAY6B,KAAKJ,MAAMzB,aAC7E,kBAAC,EAAD,CAAMA,WAAY6B,KAAKJ,MAAMzB,kB,GA5BnBY,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.376c5f74.chunk.js","sourcesContent":["import React from 'react'\r\nimport  './head.css'\r\n\r\nconst head = (props) => {\r\n    let clas=[\"head-section\"]\r\n    if(props.darktoggle)\r\n    {\r\n      clas.push(\"dark\") \r\n    }\r\n    \r\n    return (\r\n        <div className={clas.join(\" \")}>\r\n            <div className=\"headLeft-section\">\r\n                <div className=\"headLeft-sub\">\r\n                    <input type=\"text\" name=\"search\" placeholder=\"Search...\"/>\r\n                    <button> <i className=\"fa fa-search\"></i> </button>\r\n                </div>\r\n            </div>\r\n            <div className=\"headRight-section\">\r\n                <div className=\"headRight-sub\">\r\n                    <h3>{props.name}</h3>\r\n                    <small>{props.status}</small>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default head;\r\n","import React from 'react'\r\nimport Avatar from '@material-ui/core/Avatar'\r\n\r\nconst Chats = (props) => {\r\n\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <li className={props.status}>\r\n                        <div className=\"chatList\">\r\n                            <div className=\"img\">\r\n                                <i className=\"fa fa-circle\"></i>\r\n                                <Avatar/>\r\n                            </div>\r\n                            <div className=\"desc\">\r\n                                <small className=\"time\">11:11 AM</small>\r\n                                <h5>{props.name}</h5>\r\n                                <small>Lorem ipsum dolor sit amet...</small>\r\n                            </div>\r\n                        </div>\r\n                    </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chats;\r\n","import React,{Component} from 'react'\r\nimport Chats from './Chats/Chats'\r\n\r\nclass ChatList extends Component {\r\n   \r\n    render(){\r\n        return (\r\n            <div className=\"left-section mCustomScrollbar\" data-mcs-theme=\"minimal-dark\">\r\n                    <ul>\r\n                    <Chats name=\"Yogesh Bhattarai\" status=\"active\"/>\r\n                    <Chats name='Una'/>\r\n                    <Chats name=\"Yogesh\" />  \r\n                    <Chats name=\"Krishna\"/>\r\n                    <Chats name='Una' />\r\n                    <Chats name=\"Yogesh\" />\r\n                    <Chats name=\"Krishna\"/>\r\n                    <Chats name='Una' />\r\n                    <Chats name=\"Yogesh\" />\r\n                    <Chats name=\"Krishna\"/>\r\n                    </ul>\r\n                </div>\r\n        )\r\n    }\r\n   \r\n}\r\n\r\nexport default ChatList;\r\n","import React from 'react'\r\n\r\n\r\nconst Message = (props) => {\r\n    let messageclass=\"\"\r\n    let day;\r\n    if(props.by===\"me\")\r\n    {\r\n        messageclass=\"msg-right\"\r\n    }\r\n    else if (props.by===\"day\")\r\n    {\r\n       day=<li class=\"msg-day\"><small>{props.children}</small></li>\r\n    }\r\n    else{\r\n        messageclass=\"msg-left \"\r\n    }\r\n    let chat =<li className={messageclass}>\r\n    <div className=\"msg-left-sub\">\r\n        <img src=\"#\"/>\r\n        <div className=\"msg-desc\">\r\n            This is a message that i need to send to you.\r\n        </div>\r\n        <small>05:25 am</small>\r\n    </div>\r\n</li>;\r\n\r\nlet printing;\r\n\r\nif (props.by===\"day\")\r\n{\r\nprinting=day\r\n}\r\nelse{\r\n    printing=chat\r\n}\r\n    return (\r\n        <div>\r\n             {printing}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react'\r\nimport Message from './Message/Message'\r\n\r\nconst Messages = (props) => {\r\n    let clas=[\"right-section\"]\r\n    let clas2=[\"right-section-bottom\"]\r\n    if(props.darktoggle)\r\n    {\r\n        clas.push(\"dark\") \r\n        clas2.push(\"dark\") \r\n    }\r\n    \r\n    return (\r\n        <div className={clas.join(\" \")}>\r\n                <div className=\"message mCustomScrollbar\" data-mcs-theme=\"minimal-dark\">\r\n                    <ul>\r\n                    <Message by=\"me\"></Message>\r\n                    <Message by=\"day\">Wednesday</Message>\r\n                    <Message by=\"me\"></Message>\r\n                    <Message by=\"\"></Message>\r\n                    <Message by=\"me\"></Message>\r\n                    <Message by=\"day\">Thursday</Message>\r\n                    <Message by=\"me\"></Message>\r\n                    <Message by=\"me\"></Message>\r\n                    </ul>\r\n                </div>\r\n                <div className=\"right-section-bottom\">\r\n                    <form>\r\n                        <div className=\"upload-btn\">\r\n                            <button className=\"btn\"><i className=\"fa fa-photo\"></i></button>\r\n                            <input type=\"file\" name=\"myfile\" />\r\n                        </div>\r\n                        <input type=\"text\" name=\"\" placeholder=\"type here...\"/>\r\n                        <button className=\"btn-send\"><i className=\"fa fa-send\"></i></button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Messages;\r\n","import React from 'react'\r\nimport './body.css'\r\nimport ChatList from './ChatList/ChatList'\r\nimport Messages from './Messages/Messages'\r\n\r\nconst body = (props) => {\r\n    return (\r\n        <div className=\"body-section\">\r\n            <ChatList />\r\n            <Messages darktoggle={props.darktoggle}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default body;\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport HeadSection from './head/head'\nimport Body from './body/body'\n\nclass App extends Component {\n  state={\n    darktoggle:false\n  }\n\n  darkModeHandler=()=>\n{\n  let darkMode= this.state.darktoggle\n  this.setState({\n    darktoggle:!darkMode\n  })\n\n}\n\n\n\n  render() {\n    let clas=[\"main-section\"]\n\n    if(this.state.darktoggle)\n    {\n      clas.push(\"dark\") \n    }\n    \n    return (\n      <div className={clas.join(\" \")}>\n        <button onClick={this.darkModeHandler}>Dark</button>\n        <HeadSection  name=\"Yogesh Bhattarai\" status=\"online\" darktoggle={this.state.darktoggle}/>\n        <Body darktoggle={this.state.darktoggle}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}